var CACHE = 'MicrobeTraceD2019-04-30R9773';

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE).then(function(cache) {
      return cache.addAll([
        '/',
        'index.html',
        'package.json',
        'manifest.json',
        'vendor/open-iconic/font/css/open-iconic-bootstrap.min.css',
        'vendor/open-iconic/font/fonts/open-iconic.woff',
        'vendor/open-iconic/font/fonts/open-iconic.ttf',
        'vendor/open-iconic/font/fonts/open-iconic.otf',
        'vendor/bioseq.min.js',
        'vendor/patristic.min.js',
        'vendor/README.md',
        'vendor/tn93.min.js',
        'scripts/align-sw.js',
        'scripts/bundle.js',
        'scripts/common.js',
        'scripts/compute-consensus-distances.js',
        'scripts/compute-consensus.js',
        'scripts/compute-directionality.js',
        'scripts/compute-dm.js',
        'scripts/compute-links.js',
        'scripts/compute-nn.js',
        'scripts/compute-patristic-matrix.js',
        'scripts/compute-tree.js',
        'scripts/compute-triangulation.js',
        'scripts/index.js',
        'scripts/polyfills.js',
        'components/2d_network.html',
        'components/3d_network.html',
        'components/aggregation.html',
        'components/auditor.html',
        'components/bubbles.html',
        'components/files.html',
        'components/flow_diagram.html',
        'components/gantt.html',
        'components/geo_map.html',
        'components/globe.html',
        'components/heatmap.html',
        'components/help.html',
        'components/histogram.html',
        'components/phylogenetic_tree.html',
        'components/scatterplot.html',
        'components/sequences.html',
        'components/table.html',
        'components/timeline.html',
        'components/waterfall.html',
        'stylesheets/bundle.css',
        'stylesheets/bundle.min.css',
        'stylesheets/main.css',
        'img/Back_Arrow.png',
        'img/icon.ico',
        'img/image128.ico',
        'img/image128.png',
        'img/image16.ico',
        'img/image16.png',
        'img/image200.ico',
        'img/image200.png',
        'img/image256.ico',
        'img/image256.png',
        'img/image32.ico',
        'img/image32.png',
        'img/image64.ico',
        'img/image64.png',
        'img/spinner.gif',
        'img/transimage128.png',
        'data/counties.json',
        'data/countries.json',
        'data/land.json',
        'data/stars.json',
        'data/states.json',
        'data/tracts.csv',
        'data/zipcodes.csv',
        'help/3D-Network.md',
        'help/Acknowledgements.md',
        'help/Alignment.md',
        'help/Bubbles.md',
        'help/Contributing.md',
        'help/Distance-Matrices.md',
        'help/Distance-Metrics.md',
        'help/Edge-CSVs.md',
        'help/FASTA-Files.md',
        'help/Flow-Diagram.md',
        'help/_Footer.md',
        'help/Geospatial-Data.md',
        'help/Heatmap.md',
        'help/Histogram.md',
        'help/Home.md',
        'help/Inputs.md',
        'help/Installation.md',
        'help/Internet-Explorer.md',
        'help/Loading-Files.md',
        'help/Map.md',
        'help/MicrobeTrace-and-its-Alternatives.md',
        'help/Network-View.md',
        'help/Node-CSVs.md',
        'help/Offline.md',
        'help/References.md',
        'help/Security.md',
        'help/Sequences.md',
        'help/SNPs.md',
        'help/Style-Files.md',
        'help/Suspicious-Network-Topologies.md',
        'help/System-Requirements.md',
        'help/Table.md',
        'help/Theory.md',
        'help/Tile-Maps.md',
        'help/Troubleshooting.md',
        'help/z-Assimilating-MicrobeTrace.md',
        'help/z-Create-a-New-View.md',
        'help/z-Deployment.md',
        'help/z-Development.md',
        'help/z-Nomenclature.md',
        'help/z-Security-Considerations.md',
      ]);
    })
  );
});

self.addEventListener('fetch', function(evt){
  evt.respondWith(fetch(evt.request).catch(function(){
    return caches.open(CACHE).then(function(cache){
      return cache.match(evt.request).then(function(matching){
        return matching || Promise.reject('no-match');
      });
    });
  }));
});

